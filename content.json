{"pages":[],"posts":[{"title":"Typora+Hexo 本地图片在Hexo不显示","text":"解决方案：亲测有效 转载自：https://www.cnblogs.com/yinyoupoet/p/13287385.html","link":"/2021/06/26/Typora+Hexo%20%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%9C%A8Hexo%E4%B8%8D%E6%98%BE%E7%A4%BA/"},{"title":"Html页面中img标签src引用网络图片，F12检查响应403，一行代码解决问题","text":"一般我们自己直接在浏览器输入地址是可以访问网络图片，但在html页面引用却报403禁止访问资源，原因大概是可能设置了防盗链和网络安全机制的问题，别人的页面做了安全防护等一些措施。解决方案： 12&lt;!--隐藏发送请求时请求头表示来源的referrer字段--&gt;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; Referer简介Referer 是 HTTP 字段中的一部分。当浏览器向服务器发起请求的时候，请求头一般需要携带Referer字段。而该字段的值为发起请求的页面链接。而服务器可以根据链接获取到一些需要的信息。Referer 的作用Referer字段实际上告诉了服务器，用户在访问当前资源之前的位置。这往往可以用来用户跟踪。 一个典型的应用是，有些网站不允许图片外链，只有自家的网站才能显示图片，外部网站加载图片就会报错。它的实现就是基于Referer字段，如果该字段的网址是自家网址，就放行。 由于涉及隐私，很多时候不适合发送Referer字段。 这里举两个例子，都不适合暴露 URL。一个是功能 URL，即有的 URL 不要登录，可以访问，就能直接完成密码重置、邮件退订等功能。另一个是内网 URL，不希望外部用户知道内网有这样的地址。Referer字段很可能把这些 URL 暴露出去。 此外，还有一种特殊情况，需要定制Referer字段。比如社交网站上，用户在对话中提到某个网址。这时，不希望暴露用户所在的原始网址，但是可以暴露社交网站的域名，让对方知道，是我贡献了你的流量。","link":"/2021/06/26/Html%E9%A1%B5%E9%9D%A2%E4%B8%ADimg%E6%A0%87%E7%AD%BEsrc%E5%BC%95%E7%94%A8%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%89%87%EF%BC%8CF12%E6%A3%80%E6%9F%A5%E5%93%8D%E5%BA%94403%EF%BC%8C%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/06/20/hello-world/"},{"title":"helloworld","text":"","link":"/2021/06/21/helloworld/"},{"title":"使用Hexo免费搭建并发布个人博客网站","text":"使用Hexo免费搭建并发布个人博客网站前言用 Hexo 搭建，要是有一点点前端 Node 的使用经验更佳，没有当然也没关系，因为与之相关的命令并不多。使用 Hexo 需要提前在电脑上安装好 Node 和 Git ，安装成功后，就可以开始 Hexo 的安装了。 简介Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。中文官网有点像平时我们制作PPT时找的模板，我们只需找到自己喜欢的主题，后期修改主题中的配置即可。 1、git安装首先进入Git - Downloads页面，Windows系统就选Windows，其他系统选其他。安装过程很简单，基本一路 next就行，小提示尽量别安装到C盘，懂得都懂。 安装完git后,部分电脑可能需要重启电脑。测试安装是否成功： 1、鼠标右击出现Git GUI Here和Git Bash Here选项 2、命令提示符输入git --version，如果对应有版本说明安装成功 2、Node.js的安装进入http://nodejs.cn/download/ ，下载对应的版本 安装包下载完成之后双击打开，无脑安装，一路next即可。确认Node.js安装成功： 1.cmd输入命令node -v，打印出版本号即可。 2.cmd输入命令npm -v，打印出版本号即可。 3、Hexo安装先在D盘创建了一个Hexo文件夹，cd进入Hexo文件夹： 然后输入命令: npm install -g hexo-cli 确认是否安装成功，查看版本hexo -v或者hexo v，有版本号则成功， 如果这里报错一定要看你的node版本是不是大于10.13.0，这是一个坑。 输入hexo init myblog,”myblog”可自定义。接着cd myblog，进入myblog文件夹后输入npm install。 进入到我的myblog文件夹，结果如下： 这里几个文件/文件夹，config.yml是网站配置文件themes主题文件夹，存放主题，以后我们下载的主题都在这个文件下。进入themes文件夹后有个landscape文件，就是Hexo的默认主题，其文件夹下也有个**_config.yml**文件，我们叫它主题配置文件。网站配置文件和主题配置文件别混淆。 配置完成后，cd到 blog 目录，执行 hexo s 就可以在本地启动项目了，启动成功后，浏览器中输入 http://localhost:4000 就可以看到网站了。 说到 hexo s 命令，这里有几个常用命令需要给大家介绍下，分别是： 其他的命令，大伙可以参考https://hexo.io/zh-cn/docs/commands。 4、Hexo部署注意：这里需要注册GitHub账号，接着创建仓库，仓库命名格式为：自己的用户名+.github.io，这个仓库必须这样命名。 我这里因为之前创建了，所以报错。 打开网站配置文件_config.yml并修改： 上面的repo修改为自己的GitHub创建的仓库，部署之前预先生成静态文件hexo g或者hexo -g运行完成之后会在myblog文件夹下生成public文件。接着安装插件hexo-deployer-git输入npm install hexo-deployer-git --save； 部署之前要有ssh密钥，否则部署会失败。 （1）检查是否有SSH key 登陆github，点击头像位置处 Settings ——&gt; SSH and GPG keys ，查看是否有SSH keys。如果有，直接跳到第（3）步；如果没有，则继续。 （2）新建 SSH key，在git shell(或者git bash等命令窗口)，注意大小写： $ ssh-keygen -t rsa -C &quot;邮箱名&quot; 然后会出现： 12Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/dell/.ssh/id_rsa): 直接回车就可以。然后会出现： 12Enter passphrase (empty for no passphrase):Enter same passphrase again: 要求你输入密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。 注意：输入密码的时候没有*字样的，直接输入就好。然后会出现： 1234567891011121314Your identification has been saved in /c/Users/dell/.ssh/id_rsa.Your public key has been saved in /c/Users/dell/.ssh/id_rsa.pub.The key fingerprint is:65:69:······02:4b emailname@email.comThe key's randomart image is:+--[ RSA 2048]----+| || . o . || . o o = o || . o * = o || E o + o . || . o. . . || .. |+-----------------+ 至此，密钥已经成功生成。 (3）接下来在github上添加SSH key： 1.打开本地文件：id_rsa.pub（文件路径可以在上一步SSH生成成功后看到路径，比如我的是c/Users/dell/.ssh/id_rsa.pub），可以将这个文件在编辑器中打开，然后全选复制。 2.登陆github，点击头像位置处 Settings ——&gt; SSH and GPG keys ——&gt; New SSH key，点击新建SSH key。 3.将 ① 中复制的内容粘贴在key文本框里，title可以不用填（或者自己随便起一个名字都行）。 （4）测试设置是否成功： $ ssh -T git@github.com 有可能会出现： 123The authenticity of host 'github.com (192.30.252.1)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48Are you sure you want to continue connecting (yes/no)? 这种情况下，直接 yes 回车 然后会出现可能要输入密码，输入即可 Hi username! You've successfully authenticated, but GitHub does not provide shell access. 最后输入hexo -deploy或者hexo d部署到刚刚在GitHub上创建仓库里。上面的工作完成之后你就可以直接在浏览器输入你的 xxx.github.io 就可以访问啦！到这里部署就完成了。","link":"/2021/06/22/%E4%BD%BF%E7%94%A8Hexo%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E5%B9%B6%E5%8F%91%E5%B8%83%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"}],"tags":[],"categories":[]}